
TTL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000140  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b0  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000670  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000138  00000000  00000000  000017fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001935  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  7a:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USARTInit>:



void USARTInit(uint16_t ubrr_value)
{
	UBRRL = ubrr_value;
  82:	89 b9       	out	0x09, r24	; 9
	UBRRH = (ubrr_value>>8);
  84:	90 bd       	out	0x20, r25	; 32
	
	//UCSRC|=(1<<URSEL);
	UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  86:	80 b5       	in	r24, 0x20	; 32
  88:	86 68       	ori	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32


	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
  8c:	88 e9       	ldi	r24, 0x98	; 152
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <USARTReadChar>:

unsigned char USARTReadChar()
{


	while(!(UCSRA & (1<<RXC)));
  92:	5f 9b       	sbis	0x0b, 7	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <USARTReadChar>

	

	return UDR;
  96:	8c b1       	in	r24, 0x0c	; 12
}
  98:	08 95       	ret

0000009a <USARTWriteChar>:

void USARTWriteChar(char data)
{

	while(!(UCSRA & (1<<UDRE)))
  9a:	5d 9b       	sbis	0x0b, 5	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <USARTWriteChar>
	;
	

	UDR=data;
  9e:	8c b9       	out	0x0c, r24	; 12
  a0:	08 95       	ret

000000a2 <USART_StringTransmit>:
}
void USART_StringTransmit(unsigned char s[])
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	ec 01       	movw	r28, r24
	int i=0;
	while(s[i]!='\0')
  a8:	88 81       	ld	r24, Y
  aa:	88 23       	and	r24, r24
  ac:	31 f0       	breq	.+12     	; 0xba <USART_StringTransmit+0x18>
  ae:	21 96       	adiw	r28, 0x01	; 1
	{
		USARTWriteChar(s[i]);
  b0:	0e 94 4d 00 	call	0x9a	; 0x9a <USARTWriteChar>
	UDR=data;
}
void USART_StringTransmit(unsigned char s[])
{
	int i=0;
	while(s[i]!='\0')
  b4:	89 91       	ld	r24, Y+
  b6:	81 11       	cpse	r24, r1
  b8:	fb cf       	rjmp	.-10     	; 0xb0 <USART_StringTransmit+0xe>
	{
		USARTWriteChar(s[i]);
		i++;
	}
}
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <main>:

void main()
{
	DDRB=255;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
	DDRD=255;
  c4:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0xa>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x10>
  d0:	00 00       	nop

	char Recieved_command;

	_delay_ms(50);

	USARTInit(51);  // 103 for 16 Mhz 51 for 8mhz
  d2:	83 e3       	ldi	r24, 0x33	; 51
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 41 00 	call	0x82	; 0x82 <USARTInit>
		}

		if((Recieved_command=='R')||(Recieved_command=='r'))
		{
			USART_StringTransmit("\n Turn Right ");
			PORTB=0b00000001;
  da:	ff 24       	eor	r15, r15
  dc:	f3 94       	inc	r15
		}

		if((Recieved_command=='L')||(Recieved_command=='l'))
		{
			USART_StringTransmit("\n Turn Left ");
			PORTB=0b00001000;
  de:	08 e0       	ldi	r16, 0x08	; 8
		
		if((Recieved_command=='B')||(Recieved_command=='b'))
		{
			USART_StringTransmit("\n Move Backward ");
			//PORTB=0b00000110;
			PORTB=0xf0;
  e0:	10 ef       	ldi	r17, 0xF0	; 240

		if((Recieved_command=='F')||(Recieved_command=='f'))
		{
			USART_StringTransmit("\n Move Forward ");
			// PORTB=0b00001001;
			PORTB=0xff;
  e2:	df ef       	ldi	r29, 0xFF	; 255

	USARTInit(51);  // 103 for 16 Mhz 51 for 8mhz
	
	while(1)
	{
		Recieved_command=USARTReadChar();
  e4:	0e 94 49 00 	call	0x92	; 0x92 <USARTReadChar>

		if((Recieved_command=='F')||(Recieved_command=='f'))
  e8:	c8 2f       	mov	r28, r24
  ea:	cf 7d       	andi	r28, 0xDF	; 223
  ec:	c6 34       	cpi	r28, 0x46	; 70
  ee:	31 f4       	brne	.+12     	; 0xfc <main+0x3c>
		{
			USART_StringTransmit("\n Move Forward ");
  f0:	80 e6       	ldi	r24, 0x60	; 96
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 51 00 	call	0xa2	; 0xa2 <USART_StringTransmit>
			// PORTB=0b00001001;
			PORTB=0xff;
  f8:	d8 bb       	out	0x18, r29	; 24
  fa:	08 c0       	rjmp	.+16     	; 0x10c <main+0x4c>
		}
		
		if((Recieved_command=='B')||(Recieved_command=='b'))
  fc:	c2 34       	cpi	r28, 0x42	; 66
  fe:	31 f4       	brne	.+12     	; 0x10c <main+0x4c>
		{
			USART_StringTransmit("\n Move Backward ");
 100:	80 e7       	ldi	r24, 0x70	; 112
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 51 00 	call	0xa2	; 0xa2 <USART_StringTransmit>
			//PORTB=0b00000110;
			PORTB=0xf0;
 108:	18 bb       	out	0x18, r17	; 24
 10a:	08 c0       	rjmp	.+16     	; 0x11c <main+0x5c>
		}

		if((Recieved_command=='L')||(Recieved_command=='l'))
 10c:	cc 34       	cpi	r28, 0x4C	; 76
 10e:	31 f4       	brne	.+12     	; 0x11c <main+0x5c>
		{
			USART_StringTransmit("\n Turn Left ");
 110:	81 e8       	ldi	r24, 0x81	; 129
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 51 00 	call	0xa2	; 0xa2 <USART_StringTransmit>
			PORTB=0b00001000;
 118:	08 bb       	out	0x18, r16	; 24
 11a:	08 c0       	rjmp	.+16     	; 0x12c <main+0x6c>
		}

		if((Recieved_command=='R')||(Recieved_command=='r'))
 11c:	c2 35       	cpi	r28, 0x52	; 82
 11e:	31 f4       	brne	.+12     	; 0x12c <main+0x6c>
		{
			USART_StringTransmit("\n Turn Right ");
 120:	8e e8       	ldi	r24, 0x8E	; 142
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 51 00 	call	0xa2	; 0xa2 <USART_StringTransmit>
			PORTB=0b00000001;
 128:	f8 ba       	out	0x18, r15	; 24
 12a:	dc cf       	rjmp	.-72     	; 0xe4 <main+0x24>
		}


		if((Recieved_command=='S')||(Recieved_command=='s'))
 12c:	c3 35       	cpi	r28, 0x53	; 83
 12e:	d1 f6       	brne	.-76     	; 0xe4 <main+0x24>
		{
			USART_StringTransmit("\n STOP!!  ");
 130:	8c e9       	ldi	r24, 0x9C	; 156
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 51 00 	call	0xa2	; 0xa2 <USART_StringTransmit>
			PORTB=0b00000000;
 138:	18 ba       	out	0x18, r1	; 24
 13a:	d4 cf       	rjmp	.-88     	; 0xe4 <main+0x24>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
